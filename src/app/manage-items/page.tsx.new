'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePrivy } from '@privy-io/react-auth';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';

interface Item {
  id: string;
  name: string;
  description?: string | null;
  photoUrl?: string | null;
  ownerAddress: string;
  borrowerAddress?: string | null;
  status: string;
  borrowingFee?: string | null;
  depositAmount?: string | null;
  contractItemId?: string | null;
  transactionId?: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export default function ManageItemsPage() {
  const [items, setItems] = useState<Item[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editItem, setEditItem] = useState<Item | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    status: ''
  });
  const [message, setMessage] = useState<{ text: string; type: 'success' | 'error' } | null>(null);
  const { user, authenticated, login } = usePrivy();

  useEffect(() => {
    fetchItems();
  }, []);

  async function fetchItems() {
    try {
      setIsLoading(true);
      const response = await fetch('/api/items');
      if (!response.ok) {
        throw new Error('Failed to fetch items');
      }
      const data = await response.json();
      setItems(data);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  }

  function handleEdit(item: Item) {
    if (!authenticated || !user?.wallet?.address) {
      setMessage({ text: 'Debes iniciar sesión para editar items', type: 'error' });
      setTimeout(() => setMessage(null), 5000);
      return;
    }

    // Verificar si el usuario es el propietario del item
    if (user.wallet.address.toLowerCase() !== item.ownerAddress.toLowerCase()) {
      setMessage({ text: 'Solo puedes editar items que te pertenecen', type: 'error' });
      setTimeout(() => setMessage(null), 5000);
      return;
    }

    setEditItem(item);
    setFormData({
      name: item.name,
      description: item.description || '',
      status: item.status
    });
  }

  async function handleDelete(id: string, ownerAddress: string) {
    if (!authenticated || !user?.wallet?.address) {
      setMessage({ text: 'Debes iniciar sesión para eliminar items', type: 'error' });
      setTimeout(() => setMessage(null), 5000);
      return;
    }

    // Verificar si el usuario es el propietario del item
    if (user.wallet.address.toLowerCase() !== ownerAddress.toLowerCase()) {
      setMessage({ text: 'Solo puedes eliminar items que te pertenecen', type: 'error' });
      setTimeout(() => setMessage(null), 5000);
      return;
    }

    if (!confirm('¿Estás seguro de que quieres eliminar este item? Esta acción no se puede deshacer.')) {
      return;
    }

    try {
      const response = await fetch(`/api/items/${id}?ownerAddress=${user.wallet.address}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al eliminar el item');
      }

      setMessage({ text: 'Item eliminado correctamente', type: 'success' });
      
      // Refrescar la lista
      fetchItems();
      
      // Limpiar después de 3 segundos
      setTimeout(() => setMessage(null), 3000);
    } catch (err: any) {
      setMessage({ text: err.message, type: 'error' });
      setTimeout(() => setMessage(null), 5000);
    }
  }

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!editItem) return;

    if (!authenticated || !user?.wallet?.address) {
      setMessage({ text: 'Debes iniciar sesión para realizar esta acción', type: 'error' });
      setTimeout(() => setMessage(null), 5000);
      return;
    }

    // Verificar si el usuario es el propietario del item
    if (user.wallet.address.toLowerCase() !== editItem.ownerAddress.toLowerCase()) {
      setMessage({ text: 'No tienes permiso para editar este item', type: 'error' });
      setTimeout(() => setMessage(null), 5000);
      return;
    }

    try {
      const response = await fetch(`/api/items/${editItem.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...formData,
          ownerAddress: user.wallet.address // Enviar la dirección para verificación
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al actualizar el item');
      }

      setMessage({ text: 'Item actualizado correctamente', type: 'success' });
      setEditItem(null);
      
      // Refrescar la lista
      fetchItems();
      
      // Limpiar después de 3 segundos
      setTimeout(() => setMessage(null), 3000);
    } catch (err: any) {
      setMessage({ text: err.message, type: 'error' });
      setTimeout(() => setMessage(null), 5000);
    }
  }

  function handleChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  }

  if (!authenticated) {
    return (
      <div className="container max-w-5xl mx-auto p-6 text-center">
        <h1 className="text-3xl font-bold mb-6">Gestión de Items</h1>
        <div className="p-8 bg-gray-50 rounded-lg">
          <p className="mb-4">Debes iniciar sesión para gestionar tus items</p>
          <Button onClick={login}>Iniciar Sesión</Button>
        </div>
      </div>
    );
  }

  if (isLoading) return <p className="text-center p-8">Cargando items...</p>;
  if (error) return <p className="text-center text-red-500 p-8">Error: {error}</p>;

  return (
    <div className="container max-w-5xl mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Gestión de Items</h1>
        <Button asChild>
          <Link href="/">Volver al Inicio</Link>
        </Button>
      </div>

      {message && (
        <div 
          className={`p-4 mb-6 rounded-md ${
            message.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
          }`}
        >
          {message.text}
        </div>
      )}

      {editItem && (
        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Editar Item</CardTitle>
            <CardDescription>
              Actualiza la información del item. Los items vinculados a la blockchain solo pueden ser editados localmente.
            </CardDescription>
          </CardHeader>
          <form onSubmit={handleSubmit}>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="name">Nombre</Label>
                <Input 
                  id="name" 
                  name="name" 
                  value={formData.name} 
                  onChange={handleChange}
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="description">Descripción</Label>
                <Textarea 
                  id="description" 
                  name="description" 
                  value={formData.description} 
                  onChange={handleChange}
                  rows={3}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="status">Estado</Label>
                <select 
                  id="status" 
                  name="status" 
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                  className="w-full rounded-md border border-gray-300 p-2"
                >
                  <option value="available">Disponible</option>
                  <option value="borrowed">Prestado</option>
                  <option value="in_dispute">En disputa</option>
                </select>
              </div>

              {editItem.contractItemId && (
                <div className="bg-amber-50 p-4 rounded-md border border-amber-200 text-amber-800">
                  <p className="text-sm">
                    <strong>Nota:</strong> Este item está vinculado a la blockchain (ID: {editItem.contractItemId?.substring(0, 8)}...)
                    Los cambios solo afectarán a la base de datos local.
                  </p>
                </div>
              )}
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setEditItem(null)}
              >
                Cancelar
              </Button>
              <Button type="submit">Guardar Cambios</Button>
            </CardFooter>
          </form>
        </Card>
      )}

      <div className="grid gap-6">
        <h2 className="text-xl font-semibold mb-2">Lista de Items ({items.length})</h2>
        
        {items.length === 0 ? (
          <p className="text-center p-6 bg-gray-50 rounded-md">
            No hay items para mostrar. 
            <Link href="/list-item" className="ml-2 text-blue-600 hover:underline">
              Agregar un nuevo item
            </Link>
          </p>
        ) : (
          items.map((item) => {
            const isOwner = user?.wallet?.address?.toLowerCase() === item.ownerAddress.toLowerCase();
            return (
              <Card key={item.id} className={item.contractItemId ? 'border-l-4 border-l-blue-500' : ''}>
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle>{item.name}</CardTitle>
                      <CardDescription>
                        {item.description?.substring(0, 100) || 'Sin descripción'}
                        {item.description && item.description.length > 100 ? '...' : ''}
                      </CardDescription>
                    </div>
                    <div className="flex flex-col gap-2 items-end">
                      {item.contractItemId && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-semibold rounded-full">
                          Blockchain
                        </span>
                      )}
                      {isOwner && (
                        <span className="px-2 py-1 bg-green-100 text-green-800 text-xs font-semibold rounded-full">
                          Mi Item
                        </span>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2 text-sm">
                    <p>
                      <strong>ID:</strong> {item.id}
                    </p>
                    <p>
                      <strong>Propietario:</strong> {item.ownerAddress.slice(0, 6)}...{item.ownerAddress.slice(-4)}
                    </p>
                    <p>
                      <strong>Estado:</strong>{" "}
                      <span
                        className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                          item.status === "available"
                            ? "bg-green-100 text-green-700"
                            : "bg-yellow-100 text-yellow-700"
                        }`}
                      >
                        {item.status}
                      </span>
                    </p>
                    {item.contractItemId && (
                      <p>
                        <strong>ID Blockchain:</strong> {item.contractItemId.slice(0, 8)}...{item.contractItemId.slice(-6)}
                      </p>
                    )}
                  </div>
                </CardContent>
                <CardFooter className="flex justify-end space-x-2">
                  {isOwner && (
                    <>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleEdit(item)}
                      >
                        Editar
                      </Button>
                      <Button 
                        variant="destructive" 
                        size="sm"
                        onClick={() => handleDelete(item.id, item.ownerAddress)}
                      >
                        Eliminar
                      </Button>
                    </>
                  )}
                  {!isOwner && (
                    <p className="text-sm text-gray-500 italic">
                      Solo el dueño puede editar o eliminar este item
                    </p>
                  )}
                </CardFooter>
              </Card>
            );
          })
        )}
      </div>
    </div>
  );
}
